import pandas as pd
from pandas import Series, DataFrame

#=========================================
# column으로 접근해서 출력하기
dat ={'col1':[1,2,3,4],'col2':[10,20,30,40],'col3':['A','B','C','D']}
data = DataFrame(dat)
print(data['col1'])
print(data['col2']

#=========================================
# index 추가하기, col 순서 지정
date = ['2022-06-25','2022-06-26','2022-06-27','2022-06-28','2022-06-29']
team_score ={ 'toto':[1500,3000,5000,7000,5500],'seong':[4000,5000,6000,5500,4500],'han':[7000,5000,3000,5000,4000]}

team_df = DataFrame(team_score, columns= ['seong','han','toto'], index=date)

#=========================================

date = ['2022-06-25','2022-06-26','2022-06-27','2022-06-28','2022-06-29']
team_score ={ 'toto':[1500,3000,5000,7000,5500],'seong':[4000,5000,6000,5500,4500],'han':[7000,5000,3000,5000,4000]}
team_df = DataFrame(team_score, columns= ['seong','han','toto'], index=date)
print(team_df)
#col명을 이용하여 출력가능, col 2개 이상 출력시에는 대괄호 2번 쓴다.
print(team_df['seon'])
print(team_df[['seong','toto']])
#=========================================

import pandas as pd
from pandas import Series, DataFrame

date = ['2022-06-25','2022-06-26','2022-06-27','2022-06-28','2022-06-29']
team_score ={ 'toto':[1500,3000,5000,7000,5500],'seong':[4000,5000,6000,5500,4500],'han':[7000,5000,3000,5000,4000]}
team_df = DataFrame(team_score, columns= ['seong','han','toto'], index=date)
print(team_df)

print('------------------------------------')
# loc와 iloc를 이용한 접근
# loc는 데이터 프레임의 row(행)를 사용하여 데이터를 추가한다.
# iloc는 데이터 프레임의 데이터 순서(번호)를 사용하여 데이터 추출(시작번호:0)
# loc[행,열] 접근
print(team_df.loc['2022-06-25']) # row를 쓰면 그 row에 해당하는 col들의 값 출력
print(team_df.loc[['2022-06-25','2022-06-27']])
print(team_df.loc['2022-06-28':]) # [a:] a에서부터 인덱스 끝까지
print(team_df.loc[:,'seong']) #전체 행, '성'열 

print('------------------------------------')
#iloc 속성을 이용한 행 데이터 접근하기
print(team_df.iloc[0]) # iloc[행][열] > 첫 번째 행 접근
print(team_df.iloc[[0,1]]) # 0행, 1행> 첫 번째 행 두번째 행 접근
print(team_df.iloc[0:3:1]) # [0행,3행) = 0행, 1행,2행 접근, 0행부터 1칸씩의 1을 의미

print('------------------------------------')
#iloc 속성을 이용한 열 데이터 접근하기
print(team_df.iloc[:,0]) # [전체행, 0열]
print(team_df.iloc[:,[0,1]]) #[전체행, 0열&1열]
print(team_df.iloc[:,0:3:1]) #[전체행, 0열~2열]

print('------------------------------------')
# 팀별 총합 및 평균 등의 통계는 얼마나 될까?
print(team_df.sum()) # 각 col라인의 총합이 나온다.
# seong xxx
# han xxx
# toto xxxx
print(team_df.mean()) # 각 col라인의 평균이 나온다.

print('------------------------------------')
# 팀별 요약값을 보고 싶다.
print(team_df.describe())

print('------------------------------------')
# 날짜별 누적 통계
print(team_df.cumsum())

print('------------------------------------')
# 날짜별(row)합계 sum(axis=1)
print(team_df.sum(axis=1))
rowsum = team_df.sum(axis=1) # 행(날짜별) 합계
# rowsum DataFrame에 추가하기
team_df['rowsum'] = team_df.sum(axis=1)
# rowsum의 type 한 col을 의미하므로 Series 가 된다.
print(team_df)

print('------------------------------------')
# 점수가 높은 날짜별로 확인해보자 내림차순하기
print(team_df.rowsum.sort_values(ascending=False)) # ascending = False 오름차순 부정 = 내림차순
print(team_df.rowsum.sort_values(ascending=True)) #  ascending = True 오름차순 긍정 = 오름차순

print('------------------------------------')
# 조건을 걸어 일정 이상의 팀 점수의 날(day - rowsum을 파악)만 확인해보자.
score_limit_up = team_df[team_df.rowsum >= 13500]
print(score_limit_up)

print('------------------------------------')
# 합계점수가 1등, 2등인 team을 선택해보자 team관련 - colsum을 파악
colsum = team_df.sum()
print(colsum)
